# Step 2. This Dockerfile is for building the final container
# after 'Dockerfile.build' has been built
#
# Build stage
FROM node:20.15.1-alpine AS builder

LABEL maintainer="Windows Build Support"
LABEL stage="final"
LABEL description="Final stage build for Trilium Notes (Windows-specific build process)"
LABEL version="latest"

# Configure build dependencies
RUN apk add --no-cache --virtual .build-dependencies \
    autoconf \
    automake \
    g++ \
    gcc \
    libtool \
    make \
    nasm \
    libpng-dev \
    python3

WORKDIR /usr/src/app

# Copy only necessary files for build
COPY . .
COPY server-package.json package.json

# Build and cleanup in a single layer
RUN npm install && \
    npm run webpack && \
    npm prune --omit=dev && \
    npm cache clean --force && \
    cp src/public/app/share.js src/public/app-dist/. && \
    cp -r src/public/app/doc_notes src/public/app-dist/. && \
    rm -rf src/public/app && \
    rm src/services/asset_path.ts

# Runtime stage
FROM node:20.15.1-alpine

WORKDIR /usr/src/app

# Copy only necessary files from builder
COPY --from=builder /usr/src/app/node_modules ./node_modules
COPY --from=builder /usr/src/app/src ./src
COPY --from=builder /usr/src/app/db ./db
COPY --from=builder /usr/src/app/docker_healthcheck.ts .
COPY start-docker.sh .

# Make the start script executable
RUN chmod +x start-docker.sh

COPY --from=builder /usr/src/app/package.json .
COPY --from=builder /usr/src/app/config-sample.ini .
COPY --from=builder /usr/src/app/images ./images
COPY --from=builder /usr/src/app/translations ./translations
COPY --from=builder /usr/src/app/libraries ./libraries

# Set permissions for the node user
RUN chown -R node:node /usr/src/app

USER node

# Configure container
EXPOSE 8080
CMD [ "node", "./src/main" ]
HEALTHCHECK --start-period=10s CMD node docker_healthcheck.ts