# Build stage
FROM node:20.15.1-alpine AS builder

# Trust Alpine's certificate
RUN wget -O /etc/apk/keys/alpine-devel@lists.alpinelinux.org-4a6a0840.rsa.pub https://alpine-pkgs.sgerrand.com/alpine-devel@lists.alpinelinux.org-4a6a0840.rsa.pub
RUN echo "https://dl-cdn.alpinelinux.org/alpine/v3.20/main/" > /etc/apk/repositories && \
    echo "https://dl-cdn.alpinelinux.org/alpine/v3.20/community/" >> /etc/apk/repositories

# Configure build dependencies
RUN apk add --no-cache --virtual .build-dependencies \
    autoconf \
    automake \
    g++ \
    gcc \
    libtool \
    make \
    nasm \
    libpng-dev \
    python3

WORKDIR /usr/src/app

# Copy only necessary files for build
COPY . .
# COPY server-package.json package.json
# remove electron from package.json
RUN cat package.json | grep -v electron > server-package.json && cp server-package.json package.json

# Install dependencies
RUN npm install

# Build TypeScript
RUN npx tsc -p tsconfig.prod.json && \
    echo "TypeScript build completed"

# Debug: Show TypeScript output
RUN find build/src -type f -name "*.js" | sort

# Create dist and required directories
RUN mkdir -p dist/public/app && \
    mkdir -p src/public/app-dist

# Copy files in the correct order
RUN cp -R build/src/* dist/ && \
    cp -R src/public/app src/public/app-dist/ && \
    cp dist/services/asset_path.js src/services/

# Debug: Show file structure before webpack
RUN echo "=== Directory structure before webpack ===" && \
    find src/public -type f -name "*.js" | sort

# Build and optimize for production
RUN NODE_DEBUG=webpack npm run webpack && \
    npm prune --omit=dev && \
    npm cache clean --force

# Cleanup build artifacts after webpack is done
RUN rm -rf build src/

# Runtime stage

FROM node:20.15.1-alpine

# Install runtime dependencies
RUN apk add --no-cache su-exec shadow

WORKDIR /usr/src/app

# Copy only necessary files from builder
COPY --from=builder /usr/src/app/node_modules ./node_modules
COPY --from=builder /usr/src/app/dist ./dist
COPY --from=builder /usr/src/app/db ./db
COPY --from=builder /usr/src/app/docker_healthcheck.js .
COPY --from=builder /usr/src/app/start-docker.sh .
COPY --from=builder /usr/src/app/package.json .
COPY --from=builder /usr/src/app/config-sample.ini .
COPY --from=builder /usr/src/app/images ./images
COPY --from=builder /usr/src/app/translations ./translations
COPY --from=builder /usr/src/app/libraries ./libraries

# Add application user
RUN adduser -s /bin/false node; exit 0

# Configure container
EXPOSE 8080
CMD [ "./start-docker.sh" ]
HEALTHCHECK --start-period=10s CMD exec su-exec node node docker_healthcheck.js
